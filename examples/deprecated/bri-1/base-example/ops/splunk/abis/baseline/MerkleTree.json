{
	"schemaVersion": "2.0.0",
	"contractName": "MerkleTree",
	"abi": [
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "leafIndex",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "leafValue",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "root",
					"type": "bytes32"
				}
			],
			"name": "NewLeaf",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "minLeafIndex",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "bytes32[]",
					"name": "leafValues",
					"type": "bytes32[]"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "root",
					"type": "bytes32"
				}
			],
			"name": "NewLeaves",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "bytes27",
					"name": "leftInput",
					"type": "bytes27"
				},
				{
					"indexed": false,
					"internalType": "bytes27",
					"name": "rightInput",
					"type": "bytes27"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "output",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "nodeIndex",
					"type": "uint256"
				}
			],
			"name": "Output",
			"type": "event"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"name": "frontier",
			"outputs": [
				{
					"internalType": "bytes27",
					"name": "",
					"type": "bytes27"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "leafValue",
					"type": "bytes32"
				}
			],
			"name": "insertLeaf",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "root",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "bytes32[]",
					"name": "leafValues",
					"type": "bytes32[]"
				}
			],
			"name": "insertLeaves",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "root",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "leafCount",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "treeHeight",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "treeWidth",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "zero",
			"outputs": [
				{
					"internalType": "bytes27",
					"name": "",
					"type": "bytes27"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		}
	],
	"bytecode": "0x6080604052600460005560005460020a600155600060281b600360006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c021790555034801561005757600080fd5b50610a94806100676000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636e0c3fee1161005b5780636e0c3fee1461010057806376c601b114610152578063bc1b392d14610170578063dc52bf9f1461019e5761007d565b806301e3e9151461008257806330e69fc3146100a05780635c8b80ab146100be575b600080fd5b61008a61026a565b6040518082815260200191505060405180910390f35b6100a8610270565b6040518082815260200191505060405180910390f35b6100ea600480360360208110156100d457600080fd5b8101908080359060200190929190505050610276565b6040518082815260200191505060405180910390f35b61012c6004803603602081101561011657600080fd5b81019080803590602001909291905050506104e0565b604051808264ffffffffff191664ffffffffff1916815260200191505060405180910390f35b61015a610500565b6040518082815260200191505060405180910390f35b610178610506565b604051808264ffffffffff191664ffffffffff1916815260200191505060405180910390f35b610254600480360360208110156101b457600080fd5b81019080803590602001906401000000008111156101d157600080fd5b8201836020820111156101e357600080fd5b8035906020019184602083028401116401000000008311171561020557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610519565b6040518082815260200191505060405180910390f35b60005481565b60025481565b6000600254600154116102d4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610a3d6023913960400191505060405180910390fd5b60006102e16002546109a3565b9050600060018054600254010390506000602885901b9050600080610304610a1a565b600080600090505b600054811015610461578781141561036057856004896021811061032c57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b60006002888161036c57fe5b0614156103ed576004816021811061038057fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa925082600081146103bc576103be565bfe5b50506028836000600181106103cf57fe5b6020020151901b9550600260018803816103e557fe5b049650610454565b859450600360009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa9250826000811461042a5761042c565bfe5b505060288360006001811061043d57fe5b6020020151901b95506002878161045057fe5b0496505b808060010191505061030c565b508160006001811061046f57fe5b602002015197507f6a82ba2aa1d2c039c41e6e2b5a5a1090d09906f060d32af9c1ac0beff7af75c06002548a8a60405180848152602001838152602001828152602001935050505060405180910390a160026000815480929190600101919050555087975050505050505050919050565b600481602181106104ed57fe5b016000915054906101000a900460281b81565b60015481565b600360009054906101000a900460281b81565b600080825190506002546001541161057c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610a3d6023913960400191505060405180910390fd5b600254600154038111156105c5576000600254600154038203905060008090505b818110156105b95760018551038552808060010191505061059d565b50600254600154039150505b60008060008060006105d5610a1a565b60008060025490505b88600254018110156107cd5760288b6002548303815181106105fc57fe5b6020026020010151901b955060018054820103965061061a816109a3565b9750600088141561066b57856004896021811061063357fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055506107c0565b6000600190505b88811161077d5760006002898161068557fe5b061415610709576004600182036021811061069c57fe5b0160009054906101000a900460281b955086945060405186815285601b8201526020856036836002600019fa935083600081146106d8576106da565bfe5b50506028846000600181106106eb57fe5b6020020151901b96506002600189038161070157fe5b049750610770565b869550600360009054906101000a900460281b945060405186815285601b8201526020856036836002600019fa9350836000811461074657610748565bfe5b505060288460006001811061075957fe5b6020020151901b96506002888161076c57fe5b0497505b8080600101915050610672565b50856004896021811061078c57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b80806001019150506105de565b5060006001880190505b60005481116108e4576000600288816107ec57fe5b061415610870576004600182036021811061080357fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa9250826000811461083f57610841565bfe5b505060288360006001811061085257fe5b6020020151901b95506002600188038161086857fe5b0496506108d7565b859450600360009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa925082600081146108ad576108af565bfe5b50506028836000600181106108c057fe5b6020020151901b9550600287816108d357fe5b0496505b80806001019150506107d7565b50816000600181106108f257fe5b602002015198507f8ec50f97970775682a68d3c6f9caedf60fd82448ea40706b8b65d6c03648b9226002548b8b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b8381101561096e578082015181840152602081019050610953565b5050505090500194505050505060405180910390a1876002600082825401925050819055508898505050505050505050919050565b60008090506001600283816109b457fe5b061415610a15576000600190506000600290506000600182901b90505b6000841415610a1157600081836001880103816109ea57fe5b0614156109f957829350610a0c565b809150600181901b905082806001019350505b6109d1565b5050505b919050565b604051806020016040528060019060208202803883398082019150509050509056fe5468657265206973206e6f207370616365206c65667420696e2074686520747265652ea265627a7a7231582084684aa32ef07b5ce66360ec7df9b62a7615f921bad708499778b9031faf333764736f6c63430005110032",
	"sourceMap": "379:15620:11:-;;;2125:1;2100:26;;2161:10;;2156:1;:15;2132:39;;2788:56;2766:78;;;;;;;;;;;;;;;;;;;;;;379:15620;8:9:-1;5:2;;;30:1;27;20:12;5:2;379:15620:11;;;;;;;",
	"source": "/**\nA base contract which handles Merkle Tree inserts (and consequent updates to the root and 'frontier' (see below)).\nThe intention is for other 'derived' contracts to import this contract, and for those derived contracts to manage permissions to actually call the insertLeaf/insertleaves functions of this base contract.\n\n@Author iAmMichaelConnor\n*/\n\npragma solidity ^0.5.8;\n\n\ncontract MerkleTree {\n\n    /*\n    @notice Explanation of the Merkle Tree in this contract:\n    This is an append-only merkle tree; populated from left to right.\n    We do not store all of the merkle tree's nodes. We only store the right-most 'frontier' of nodes required to calculate the new root when the next new leaf value is added.\n\n                      TREE (not stored)                       FRONTIER (stored)\n\n                                 0                                     ?\n                          /             \\\n                   1                             2                     ?\n               /       \\                     /       \\\n           3             4               5               6             ?\n         /   \\         /   \\           /   \\           /    \\\n       7       8      9      10      11      12      13      14        ?\n     /  \\    /  \\   /  \\    /  \\    /  \\    /  \\    /  \\    /  \\\n    15  16  17 18  19  20  21  22  23  24  25  26  27  28  29  30      ?\n\n    level  row  width  start#     end#\n      4     0   2^0=1   w=0     2^1-1=0\n      3     1   2^1=2   w=1     2^2-1=2\n      2     2   2^2=4   w=3     2^3-1=6\n      1     3   2^3=8   w=7     2^4-1=14\n      0     4   2^4=16  w=15    2^5-1=30\n\n    height = 4\n    w = width = 2 ** height = 2^4 = 16\n    #nodes = (2 ** (height + 1)) - 1 = 2^5-1 = 31\n\n    */\n\n    /**\n    These events are what the merkle-tree microservice's filters will listen for.\n    */\n    event NewLeaf(uint leafIndex, bytes32 leafValue, bytes32 root);\n    event NewLeaves(uint minLeafIndex, bytes32[] leafValues, bytes32 root);\n\n    event Output(bytes27 leftInput, bytes27 rightInput, bytes32 output, uint nodeIndex); // for debugging only\n\n    uint public treeHeight = 4;\n    uint public treeWidth = 2 ** treeHeight; // 2 ** treeHeight\n    uint256 public leafCount; // the number of leaves currently in the tree\n\n    /**\n    Whilst ordinarily, we'd work solely with bytes32, we need to truncate nodeValues up the tree. Therefore, we need to declare certain variables with lower byte-lengths:\n    LEAF_HASHLENGTH = 32 bytes;\n    NODE_HASHLENGTH = 27 bytes;\n    5 byte difference * 8 bits per byte = 40 bit shift to truncate hashlengths.\n    27 bytes * 2 inputs to sha() = 54 byte input to sha(). 54 = 0x36.\n    If in future you want to change the truncation values, search for '27', '40' and '0x36'.\n    */\n    bytes27 public zero = 0x000000000000000000000000000000000000000000000000000000;\n    // bytes32 zero = 0x0000000000000000000000000000000000000000000000000000000000000000;\n    bytes27[33] public frontier; // the right-most 'frontier' of nodes required to calculate the new root when the next new leaf value is added.\n\n    /**\n    @notice Get the index of the frontier (or 'storage slot') into which we will next store a nodeValue (based on the leafIndex currently being inserted). See the top-level README for a detailed explanation.\n    @return uint - the index of the frontier (or 'storage slot') into which we will next store a nodeValue\n    */\n    function getFrontierSlot(uint leafIndex) private pure returns (uint slot) {\n        slot = 0;\n        if (leafIndex % 2 == 1) {\n            uint exp1 = 1;\n            uint pow1 = 2;\n            uint pow2 = pow1 << 1;\n            while (slot == 0) {\n                if ((leafIndex + 1 - pow1) % pow2 == 0) {\n                    slot = exp1;\n                } else {\n                    pow1 = pow2;\n                    pow2 = pow2 << 1;\n                    exp1++;\n                }\n            }\n        }\n    }\n\n    /**\n    @notice Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier.\n    @param leafValue - the value of the leaf being inserted.\n    @return bytes32 - the root of the merkle tree, after the insert.\n    */\n    function insertLeaf(bytes32 leafValue) public returns (bytes32 root) {\n\n        // check that space exists in the tree:\n        require(treeWidth > leafCount, \"There is no space left in the tree.\");\n\n        uint slot = getFrontierSlot(leafCount);\n        uint nodeIndex = leafCount + treeWidth - 1;\n        bytes27 nodeValue = bytes27(leafValue << 40); // nodeValue is the hash, which iteratively gets overridden to the top of the tree until it becomes the root.\n\n        bytes27 leftInput;\n        bytes27 rightInput;\n        bytes32[1] memory output; // output of the hash function\n        bool success;\n\n        for (uint level = 0; level < treeHeight; level++) {\n\n            if (level == slot) frontier[slot] = nodeValue;\n\n            if (nodeIndex % 2 == 0) {\n                // even nodeIndex\n                leftInput = frontier[level];\n                rightInput = nodeValue;\n\n                // compute the hash of the inputs:\n                // note: we don't extract this hashing into a separate function because that would cost more gas.\n                /*\n                  * gasLimit: calling with gas equal to not(0), as we have here, will send all available gas to the function being called. This removes the need to guess or upper-bound the amount of gas being sent yourself. As an alternative, we could have guessed the gas needed with: sub(gas, 2000)\n                  * to: the sha256 precompiled contract is at address 0x2: Sending the amount of gas currently available to us (or after subtracting 2000 gas if using the alternative mentioned above);\n                  * inputOffset: Input data to the sha256 precompiled contract.\n                  * inputSize:\n                    hex input size = 0x40 = 2 x 32-bytes\n                    OR\n                    hex input size = 0x36 = 2 x 27-bytes\n                  * outputOffset: \"where will the output be stored?\" (in variable 'output' in our case)\n                  * outputSize: sha256 outputs 256-bits = 32-bytes = 0x20 in hex\n                */\n                assembly {\n                    // define pointer\n                    let input := mload(0x40) // 0x40 is always the free memory pointer. Don't change this.\n                    mstore(input, leftInput) // push first input\n                    mstore(add(input, 0x1b), rightInput) // push second input at position 27bytes = 0x1b\n                    success := staticcall(not(0), 2, input, 0x36, output, 0x20)\n                    // Use \"invalid\" to make gas estimation work\n                    switch success case 0 { invalid() }\n                }\n\n                nodeValue = bytes27(output[0] << 40); // the parentValue, but will become the nodeValue of the next level\n                nodeIndex = (nodeIndex - 1) / 2; // move one row up the tree\n\n                // emit Output(leftInput, rightInput, output[0], nodeIndex); // for debugging only\n            } else {\n                // odd nodeIndex\n                leftInput = nodeValue;\n                rightInput = zero;\n\n                // compute the hash of the inputs:\n                assembly {\n                    // define pointer\n                    let input := mload(0x40) // 0x40 is always the free memory pointer. Don't change this.\n                    mstore(input, leftInput) // push first input\n                    mstore(add(input, 0x1b), rightInput) // push second input at position 27bytes = 0x1b\n                    success := staticcall(not(0), 2, input, 0x36, output, 0x20)\n                    // Use \"invalid\" to make gas estimation work\n                    switch success case 0 { invalid() }\n                }\n\n                nodeValue = bytes27(output[0] << 40); // the parentValue, but will become the nodeValue of the next level\n                nodeIndex = nodeIndex / 2; // move one row up the tree\n\n                // emit Output(leftInput, rightInput, output[0], nodeIndex); // for debugging only\n            }\n        }\n\n        root = output[0];\n\n        emit NewLeaf(leafCount, leafValue, root); // this event is what the merkle-tree microservice's filter will listen for.\n\n        leafCount++; // the incrememnting of leafCount costs us 20k for the first leaf, and 5k thereafter\n\n        return root; //the root of the tree\n    }\n\n    /**\n    @notice Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier.\n    @param leafValues - the values of the leaves being inserted.\n    @return bytes32[] - the root of the merkle tree, after all the inserts.\n    */\n    function insertLeaves(bytes32[] memory leafValues) public returns (bytes32 root) {\n        uint numberOfLeaves = leafValues.length;\n\n        // check that space exists in the tree:\n        require(treeWidth > leafCount, \"There is no space left in the tree.\");\n        if (numberOfLeaves > treeWidth - leafCount) {\n            uint numberOfExcessLeaves = numberOfLeaves - (treeWidth - leafCount);\n            // remove the excess leaves, because we only want to emit those we've added as an event:\n            for (uint xs = 0; xs < numberOfExcessLeaves; xs++) {\n                /**\n                  CAUTION!!! This attempts to succinctly achieve leafValues.pop() on a **memory** dynamic array. Not thoroughly tested!\n                  Credit: https://ethereum.stackexchange.com/a/51897/45916\n                */\n                assembly {\n                    mstore(leafValues, sub(mload(leafValues), 1))\n                }\n            }\n            numberOfLeaves = treeWidth - leafCount;\n        }\n\n        uint slot;\n        uint nodeIndex;\n        bytes27 nodeValue;\n\n        bytes27 leftInput;\n        bytes27 rightInput;\n        bytes32[1] memory output; // the output of the hash\n        bool success;\n\n        // consider each new leaf in turn, from left to right:\n        for (uint leafIndex = leafCount; leafIndex < leafCount + numberOfLeaves; leafIndex++) {\n            nodeValue = bytes27(leafValues[leafIndex - leafCount] << 40);\n            nodeIndex = leafIndex + treeWidth - 1; // convert the leafIndex to a nodeIndex\n\n            slot = getFrontierSlot(leafIndex); // determine at which level we will next need to store a nodeValue\n\n            if (slot == 0) {\n                frontier[slot] = nodeValue; // store in frontier\n                continue;\n            }\n\n            // hash up to the level whose nodeValue we'll store in the frontier slot:\n            for (uint level = 1; level <= slot; level++) {\n                if (nodeIndex % 2 == 0) {\n                    // even nodeIndex\n                    leftInput = frontier[level - 1];\n                    rightInput = nodeValue;\n                    // compute the hash of the inputs:\n                    // note: we don't extract this hashing into a separate function because that would cost more gas.\n                    assembly {\n                        // define pointer\n                        let input := mload(0x40) // 0x40 is always the free memory pointer. Don't change this.\n                        mstore(input, leftInput) // push first input\n                        mstore(add(input, 0x1b), rightInput) // push second input at position 27bytes = 0x1b\n                        success := staticcall(not(0), 2, input, 0x36, output, 0x20)\n                        // Use \"invalid\" to make gas estimation work\n                        switch success case 0 { invalid() }\n                    }\n\n                    // emit Output(leftInput, rightInput, output[0], level, nodeIndex); // for debugging only\n\n                    nodeValue = bytes27(output[0] << 40); // the parentValue, but will become the nodeValue of the next level\n                    nodeIndex = (nodeIndex - 1) / 2; // move one row up the tree\n                } else {\n                    // odd nodeIndex\n                    leftInput = nodeValue;\n                    rightInput = zero;\n                    // compute the hash of the inputs:\n                    assembly {\n                        // define pointer\n                        let input := mload(0x40) // 0x40 is always the free memory pointer. Don't change this.\n                        mstore(input, leftInput) // push first input\n                        mstore(add(input, 0x1b), rightInput) // push second input at position 27bytes = 0x1b\n                        success := staticcall(not(0), 2, input, 0x36, output, 0x20)\n                        // Use \"invalid\" to make gas estimation work\n                        switch success case 0 { invalid() }\n                    }\n\n                    // emit Output(leftInput, rightInput, output[0], level, nodeIndex); // for debugging only\n\n                    nodeValue = bytes27(output[0] << 40); // the parentValue, but will become the nodeValue of the next level\n                    nodeIndex = nodeIndex / 2; // the parentIndex, but will become the nodeIndex of the next level\n                }\n            }\n            frontier[slot] = nodeValue; // store in frontier\n        }\n\n        // So far we've added all leaves, and hashed up to a particular level of the tree. We now need to continue hashing from that level until the root:\n        for (uint level = slot + 1; level <= treeHeight; level++) {\n\n            if (nodeIndex % 2 == 0) {\n                // even nodeIndex\n                leftInput = frontier[level - 1];\n                rightInput = nodeValue;\n                // compute the hash of the inputs:\n                assembly {\n                    // define pointer\n                    let input := mload(0x40) // 0x40 is always the free memory pointer. Don't change this.\n                    mstore(input, leftInput) // push first input\n                    mstore(add(input, 0x1b), rightInput) // push second input at position 27bytes = 0x1b\n                    success := staticcall(not(0), 2, input, 0x36, output, 0x20)\n                    // Use \"invalid\" to make gas estimation work\n                    switch success case 0 { invalid() }\n                }\n\n                // emit Output(leftInput, rightInput, output[0], level, nodeIndex); // for debugging only\n\n                nodeValue = bytes27(output[0] << 40); // the parentValue, but will become the nodeValue of the next level\n                nodeIndex = (nodeIndex - 1) / 2;  // the parentIndex, but will become the nodeIndex of the next level\n            } else {\n                // odd nodeIndex\n                leftInput = nodeValue;\n                rightInput = zero;\n                // compute the hash of the inputs:\n                assembly {\n                    // define pointer\n                    let input := mload(0x40) // 0x40 is always the free memory pointer. Don't change this.\n                    mstore(input, leftInput) // push first input\n                    mstore(add(input, 0x1b), rightInput) // push second input at position 27bytes = 0x1b\n                    success := staticcall(not(0), 2, input, 0x36, output, 0x20)\n                    // Use \"invalid\" to make gas estimation work\n                    switch success case 0 { invalid() }\n                }\n\n                // emit Output(leftInput, rightInput, output[0], level, nodeIndex); // for debugging only\n\n                nodeValue = bytes27(output[0] << 40); // the parentValue, but will become the nodeValue of the next level\n                nodeIndex = nodeIndex / 2;  // the parentIndex, but will become the nodeIndex of the next level\n            }\n        }\n\n        root = output[0];\n\n        emit NewLeaves(leafCount, leafValues, root); // this event is what the merkle-tree microservice's filter will listen for.\n\n        leafCount += numberOfLeaves; // the incrememnting of leafCount costs us 20k for the first leaf, and 5k thereafter\n\n        return root; //the root of the tree\n    }\n}\n",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.17+commit.d19bba13.js"
	}
}
