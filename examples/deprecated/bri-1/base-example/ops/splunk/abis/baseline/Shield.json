{
	"schemaVersion": "2.0.0",
	"contractName": "Shield",
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_verifier",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_erc1820",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "nullifier",
					"type": "bytes32"
				}
			],
			"name": "DeletedCommitment",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "byShieldContract",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "byVerifierContract",
					"type": "uint256"
				}
			],
			"name": "GasUsed",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "addr",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "interfaceHash",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "implementer",
					"type": "address"
				}
			],
			"name": "InterfaceImplementerSet",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "addr",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newManager",
					"type": "address"
				}
			],
			"name": "ManagerChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "newCommitment",
					"type": "bytes32"
				}
			],
			"name": "NewCommitment",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "leafIndex",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "leafValue",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "root",
					"type": "bytes32"
				}
			],
			"name": "NewLeaf",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "minLeafIndex",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "bytes32[]",
					"name": "leafValues",
					"type": "bytes32[]"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "root",
					"type": "bytes32"
				}
			],
			"name": "NewLeaves",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "bytes27",
					"name": "leftInput",
					"type": "bytes27"
				},
				{
					"indexed": false,
					"internalType": "bytes27",
					"name": "rightInput",
					"type": "bytes27"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "output",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "nodeIndex",
					"type": "uint256"
				}
			],
			"name": "Output",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "nullifier",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "newCommitment",
					"type": "bytes32"
				}
			],
			"name": "UpdatedCommitment",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "newVerifierContract",
					"type": "address"
				}
			],
			"name": "VerifierChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "enum Shield.TransactionTypes",
					"name": "txType",
					"type": "uint8"
				}
			],
			"name": "VkChanged",
			"type": "event"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "_owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "_oldManager",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_newManager",
					"type": "address"
				}
			],
			"name": "assignManager",
			"outputs": [],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "interfaceHash",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "addr",
					"type": "address"
				}
			],
			"name": "canImplementInterfaceForAddress",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "_verifier",
					"type": "address"
				}
			],
			"name": "changeVerifier",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [],
			"name": "close",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"name": "commitments",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_proof",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256[]",
					"name": "_inputs",
					"type": "uint256[]"
				},
				{
					"internalType": "bytes32",
					"name": "_newMSACommitment",
					"type": "bytes32"
				}
			],
			"name": "createMSA",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_proof",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256[]",
					"name": "_inputs",
					"type": "uint256[]"
				},
				{
					"internalType": "bytes32",
					"name": "_root",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "_nullifierOfOldMSACommitment",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "_newMSACommitment",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "_newPOCommitment",
					"type": "bytes32"
				}
			],
			"name": "createPO",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"name": "frontier",
			"outputs": [
				{
					"internalType": "bytes27",
					"name": "",
					"type": "bytes27"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "_addr",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "_interfaceHash",
					"type": "bytes32"
				}
			],
			"name": "getInterfaceImplementer",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "getInterfaces",
			"outputs": [
				{
					"internalType": "bytes4",
					"name": "",
					"type": "bytes4"
				}
			],
			"payable": false,
			"stateMutability": "pure",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "_addr",
					"type": "address"
				}
			],
			"name": "getManager",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "getVerifier",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "_contract",
					"type": "address"
				},
				{
					"internalType": "bytes4",
					"name": "_interfaceId",
					"type": "bytes4"
				}
			],
			"name": "implementsERC165Interface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "_contract",
					"type": "address"
				},
				{
					"internalType": "bytes4",
					"name": "_interfaceId",
					"type": "bytes4"
				}
			],
			"name": "implementsERC165InterfaceNoCache",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "leafValue",
					"type": "bytes32"
				}
			],
			"name": "insertLeaf",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "root",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "bytes32[]",
					"name": "leafValues",
					"type": "bytes32[]"
				}
			],
			"name": "insertLeaves",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "root",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "addr",
					"type": "address"
				},
				{
					"internalType": "string",
					"name": "_interfaceLabel",
					"type": "string"
				}
			],
			"name": "interfaceAddr",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "string",
					"name": "_interfaceName",
					"type": "string"
				}
			],
			"name": "interfaceHash",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "pure",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "latestRoot",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "leafCount",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"name": "nullifiers",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "uint256[]",
					"name": "_vk",
					"type": "uint256[]"
				},
				{
					"internalType": "enum Shield.TransactionTypes",
					"name": "_txType",
					"type": "uint8"
				}
			],
			"name": "registerVerificationKey",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"name": "roots",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "_addr",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "_interfaceHash",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "_implementer",
					"type": "address"
				}
			],
			"name": "setInterfaceImplementer",
			"outputs": [],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [],
			"name": "setInterfaces",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "_addr",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_newManager",
					"type": "address"
				}
			],
			"name": "setManager",
			"outputs": [],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "treeHeight",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "treeWidth",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "_contract",
					"type": "address"
				},
				{
					"internalType": "bytes4",
					"name": "_interfaceId",
					"type": "bytes4"
				}
			],
			"name": "updateERC165Cache",
			"outputs": [],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"name": "vks",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "zero",
			"outputs": [
				{
					"internalType": "bytes27",
					"name": "",
					"type": "bytes27"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		}
	],
	"bytecode": "0x6080604052600460015560015460020a600255600060281b600460006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055503480156200005857600080fd5b50604051620041da380380620041da833981810160405260408110156200007e57600080fd5b81019080805190602001909291908051906020019092919050505080620000ab33620001c860201b60201c565b620000c36301ffc9a760e01b6200020b60201b60201c565b620000d36200031560201b60201c565b5080602b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001266200043f60201b60201c565b5081602c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001786200031560201b60201c565b50620001c06040518060400160405280600781526020017f49536869656c6400000000000000000000000000000000000000000000000000815250306200046860201b60201c565b5050620005dc565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415620002a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b600160266000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000620003276200043f60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620003ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180620041ac602e913960400191505060405180910390fd5b600160276000630f1d6e6c60e01b63d7cc65e960e01b6346657fe960e01b63cf04fb9460e01b1818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000826040516020018082805190602001908083835b60208310620004a357805182526020820191506020810190506020830392506200047e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050602b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329965a1d3083856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015620005be57600080fd5b505af1158015620005d3573d6000803e3d6000fd5b50505050505050565b613bc080620005ec6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80638da5cb5b11610125578063cf04fb94116100ad578063ebac15f91161007c578063ebac15f914610e25578063f2fde38b14610e81578063f37f6a3414610ec5578063f712f3e814610f29578063fca85eb314610fae57610211565b8063cf04fb9414610bef578063d7b0fef114610c4b578063d7cc65e914610c69578063dc52bf9f14610d5957610211565b8063aabbb8ca116100f4578063aabbb8ca14610a22578063ae6dead714610ab0578063b2bdfa7b14610af2578063b705676514610b3c578063bc1b392d14610bc157610211565b80638da5cb5b14610885578063a0392769146108cf578063a41e7d5114610969578063a8f4324e146109d657610211565b806343d726d6116101a85780635df8122f116101775780635df8122f146106e257806365ba36c1146107465780636e0c3fee146107d357806376c601b114610825578063839df9451461084357610211565b806343d726d61461055b578063449a09a41461057d57806346657fe9146106565780635c8b80ab146106a057610211565b806329965a1d116101e457806329965a1d146104095780632997e86b1461047757806330e69fc3146104b95780633d584063146104d757610211565b806301e3e9151461021657806301ffc9a7146102345780630f1d6e6c14610299578063249cb3fa146103a7575b600080fd5b61021e610fd0565b6040518082815260200191505060405180910390f35b61027f6004803603602081101561024a57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610fd6565b604051808215151515815260200191505060405180910390f35b61038d600480360360c08110156102af57600080fd5b81019080803590602001906401000000008111156102cc57600080fd5b8201836020820111156102de57600080fd5b8035906020019184602083028401116401000000008311171561030057600080fd5b90919293919293908035906020019064010000000081111561032157600080fd5b82018360208201111561033357600080fd5b8035906020019184602083028401116401000000008311171561035557600080fd5b90919293919293908035906020019092919080359060200190929190803590602001909291908035906020019092919050505061103e565b604051808215151515815260200191505060405180910390f35b6103f3600480360360408110156103bd57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117f3565b6040518082815260200191505060405180910390f35b6104756004803603606081101561041f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611844565b005b6104a36004803603602081101561048d57600080fd5b8101908080359060200190929190505050611c81565b6040518082815260200191505060405180910390f35b6104c1611c99565b6040518082815260200191505060405180910390f35b610519600480360360208110156104ed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c9f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610563611da4565b604051808215151515815260200191505060405180910390f35b6106146004803603604081101561059357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156105d057600080fd5b8201836020820111156105e257600080fd5b8035906020019184600183028401116401000000008311171561060457600080fd5b9091929391929390505050611e51565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61065e611f72565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106cc600480360360208110156106b657600080fd5b8101908080359060200190929190505050611f9c565b6040518082815260200191505060405180910390f35b610744600480360360408110156106f857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612207565b005b6107bd6004803603602081101561075c57600080fd5b810190808035906020019064010000000081111561077957600080fd5b82018360208201111561078b57600080fd5b803590602001918460018302840111640100000000831117156107ad57600080fd5b90919293919293905050506123c7565b6040518082815260200191505060405180910390f35b6107ff600480360360208110156107e957600080fd5b8101908080359060200190929190505050612401565b604051808264ffffffffff191664ffffffffff1916815260200191505060405180910390f35b61082d612421565b6040518082815260200191505060405180910390f35b61086f6004803603602081101561085957600080fd5b8101908080359060200190929190505050612427565b6040518082815260200191505060405180910390f35b61088d61243f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610953600480360360408110156108e557600080fd5b810190808035906020019064010000000081111561090257600080fd5b82018360208201111561091457600080fd5b8035906020019184602083028401116401000000008311171561093657600080fd5b9091929391929390803560ff169060200190929190505050612468565b6040518082815260200191505060405180910390f35b6109d46004803603604081101561097f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061256f565b005b610a0c600480360360408110156109ec57600080fd5b8101908080359060200190929190803590602001909291905050506126de565b6040518082815260200191505060405180910390f35b610a6e60048036036040811015610a3857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061270c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610adc60048036036020811015610ac657600080fd5b81019080803590602001909291905050506127fb565b6040518082815260200191505060405180910390f35b610afa612813565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610ba760048036036040811015610b5257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050612838565b604051808215151515815260200191505060405180910390f35b610bc96128ed565b604051808264ffffffffff191664ffffffffff1916815260200191505060405180910390f35b610c3160048036036020811015610c0557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612900565b604051808215151515815260200191505060405180910390f35b610c53612a39565b6040518082815260200191505060405180910390f35b610d3f60048036036060811015610c7f57600080fd5b8101908080359060200190640100000000811115610c9c57600080fd5b820183602082011115610cae57600080fd5b80359060200191846020830284011164010000000083111715610cd057600080fd5b909192939192939080359060200190640100000000811115610cf157600080fd5b820183602082011115610d0357600080fd5b80359060200191846020830284011164010000000083111715610d2557600080fd5b909192939192939080359060200190929190505050612a3f565b604051808215151515815260200191505060405180910390f35b610e0f60048036036020811015610d6f57600080fd5b8101908080359060200190640100000000811115610d8c57600080fd5b820183602082011115610d9e57600080fd5b80359060200191846020830284011164010000000083111715610dc057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612e43565b6040518082815260200191505060405180910390f35b610e2d6132ce565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610ec360048036036020811015610e9757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132f8565b005b610f2760048036036040811015610edb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613467565b005b610f9460048036036040811015610f3f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050613475565b604051808215151515815260200191505060405180910390f35b610fb66135ef565b604051808215151515815260200191505060405180910390f35b60015481565b600060276000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600061104861391f565b5a8160006003811061105657fe5b602002018181525050600060088989600081811061107057fe5b9050602002013560001b901b905060006008600289898989604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040526040518082805190602001908083835b602083106110ef57805182526020820191506020810190506020830392506110cc565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015611131573d6000803e3d6000fd5b5050506040513d602081101561114657600080fd5b8101908080519060200190929190505050901b90508160ff19168160ff1916146111bb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180613b476024913960400191505060405180910390fd5b5a836000600381106111c957fe5b602002015103836001600381106111dc57fe5b6020020181815250505a836000600381106111f357fe5b6020020181815250506000602c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387d9d0238e8e8e8e6032600060018081111561125057fe5b81526020019081526020016000206040518663ffffffff1660e01b8152600401808060200180602001806020018481038452898982818152602001925060200280828437600081840152601f19601f8201169050808301925050508481038352878782818152602001925060200280828437600081840152601f19601f820116905080830192505050848103825285818154815260200191508054801561131657602002820191906000526020600020905b815481526020019060010190808311611302575b505098505050505050505050602060405180830381600087803b15801561133c57600080fd5b505af1158015611350573d6000803e3d6000fd5b505050506040513d602081101561136657600080fd5b81019080805190602001909291905050509050806113cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806139f9602f913960400191505060405180910390fd5b5a846000600381106113dd57fe5b602002015103846002600381106113f057fe5b6020020181815250505a8460006003811061140757fe5b60200201818152505088603060008b8152602001908152602001600020541461147b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526039815260200180613abf6039913960400191505060405180910390fd5b858714156114d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604f815260200180613af8604f913960600191505060405180910390fd5b6000801b602e60008981526020019081526020016000205414611542576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613a9d6022913960400191505060405180910390fd5b6000801b602f60008a815260200190815260200160002054146115b0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526047815260200180613a286047913960600191505060405180910390fd5b6000801b602e6000888152602001908152602001600020541461161e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613b6b6021913960400191505060405180910390fd5b87602f60008a815260200190815260200160002081905550606060026040519080825280602002602001820160405280156116685781602001602082028038833980820191505090505b509050878160008151811061167957fe5b602002602001018181525050868160018151811061169357fe5b6020026020010181815250506116a881612e43565b603181905550603154603060006031548152602001908152602001600020819055507ff4ae4f4740a11f664366d6184e7e128d91c53fc7935127134646199bc78b39378989604051808381526020018281526020019250505060405180910390a17f641830526c905804af3625676cc835cb33e4b5da323f21948a17d5404687ca49876040518082815260200191505060405180910390a15a8560006003811061174e57fe5b60200201518660016003811061176057fe5b602002015101038560016003811061177457fe5b6020020181815250507f853720e5a853f80d6ab997d85a0ddd977b89b1e70cc4a1303975d10974c60e15856001600381106117ab57fe5b6020020151866002600381106117bd57fe5b6020020151604051808381526020018281526020019250505060405180910390a160019550505050505098975050505050505050565b600060405160200180807f455243313832305f4143434550545f4d41474943000000000000000000000000815250601401905060405160208183030381529060405280519060200120905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461187f5783611881565b335b90503373ffffffffffffffffffffffffffffffffffffffff166118a382611c9f565b73ffffffffffffffffffffffffffffffffffffffff161461192c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f7420746865206d616e61676572000000000000000000000000000000000081525060200191505060405180910390fd5b6119358361370f565b156119a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4d757374206e6f7420626520616e20455243313635206861736800000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611a1157503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611b915760405160200180807f455243313832305f4143434550545f4d414749430000000000000000000000008152506014019050604051602081830303815290604052805190602001208273ffffffffffffffffffffffffffffffffffffffff1663249cb3fa85846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611ae257600080fd5b505afa158015611af6573d6000803e3d6000fd5b505050506040513d6020811015611b0c57600080fd5b810190808051906020019092919050505014611b90576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f446f6573206e6f7420696d706c656d656e742074686520696e7465726661636581525060200191505060405180910390fd5b5b81602860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16838273ffffffffffffffffffffffffffffffffffffffff167f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15360405160405180910390a450505050565b602f6020528060005260406000206000915090505481565b60035481565b60008073ffffffffffffffffffffffffffffffffffffffff16602960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611d3c57819050611d9f565b602960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b6000611dae61243f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613a6f602e913960400191505060405180910390fd5b611e3961243f565b73ffffffffffffffffffffffffffffffffffffffff16ff5b6000808383604051602001808383808284378083019250505092505050604051602081830303815290604052805190602001209050602b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aabbb8ca86836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015611f2d57600080fd5b505afa158015611f41573d6000803e3d6000fd5b505050506040513d6020811015611f5757600080fd5b81019080805190602001909291905050509150509392505050565b6000602c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060035460025411611ffa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806139d66023913960400191505060405180910390fd5b600061200760035461373f565b905060006001600254600354010390506000602885901b905060008061202b613941565b600080600090505b600154811015612188578781141561208757856005896021811061205357fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b60006002888161209357fe5b06141561211457600581602181106120a757fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa925082600081146120e3576120e5565bfe5b50506028836000600181106120f657fe5b6020020151901b95506002600188038161210c57fe5b04965061217b565b859450600460009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa9250826000811461215157612153565bfe5b505060288360006001811061216457fe5b6020020151901b95506002878161217757fe5b0496505b8080600101915050612033565b508160006001811061219657fe5b602002015197507f6a82ba2aa1d2c039c41e6e2b5a5a1090d09906f060d32af9c1ac0beff7af75c06003548a8a60405180848152602001838152602001828152602001935050505060405180910390a160036000815480929190600101919050555087975050505050505050919050565b3373ffffffffffffffffffffffffffffffffffffffff1661222783611c9f565b73ffffffffffffffffffffffffffffffffffffffff16146122b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f7420746865206d616e61676572000000000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146122e957806122ec565b60005b602960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a35050565b6000828260405160200180838380828437808301925050509250505060405160208183030381529060405280519060200120905092915050565b6005816021811061240e57fe5b016000915054906101000a900460281b81565b60025481565b602e6020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061247261243f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613a6f602e913960400191505060405180910390fd5b83836032600085600181111561250757fe5b81526020019081526020016000209190612522929190613963565b507fcfd8f8b734ebb05f1872379d344363750ce642d6cbd9f66a55aa3f1dbeb0c5d3826040518082600181111561255557fe5b60ff16815260200191505060405180910390a19392505050565b6125798282612838565b612584576000612586565b815b602860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001602a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b603260205281600052604060002081815481106126f757fe5b90600052602060002001600091509150505481565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612749578361274b565b335b90506127568361370f565b1561278057600083905061276a8282613475565b612775576000612777565b815b925050506127f5565b602860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150505b92915050565b60306020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600061284e856301ffc9a760e01b6137b6565b809250819350505060008214806128655750600081145b15612875576000925050506128e7565b6128868563ffffffff60e01b6137b6565b8092508193505050600082148061289e575060008114155b156128ae576000925050506128e7565b6128b885856137b6565b80925081935050506001821480156128d05750600181145b156128e0576001925050506128e7565b6000925050505b92915050565b600460009054906101000a900460281b81565b600061290a61243f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461298d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613a6f602e913960400191505060405180910390fd5b81602c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507eaccbf0787bf565863b49aef6d6d8ff2f631f1da95c76e016aed7a21a11a7b782604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b60315481565b6000805a90506000600886866000818110612a5657fe5b9050602002013560001b901b905060006008600286604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b60208310612abd5780518252602082019150602081019050602083039250612a9a565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015612aff573d6000803e3d6000fd5b5050506040513d6020811015612b1457600080fd5b8101908080519060200190929190505050901b90508160ff19168160ff191614612b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180613b476024913960400191505060405180910390fd5b60005a840390505a93506000602c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387d9d0238c8c8c8c60326000806001811115612be757fe5b81526020019081526020016000206040518663ffffffff1660e01b8152600401808060200180602001806020018481038452898982818152602001925060200280828437600081840152601f19601f8201169050808301925050508481038352878782818152602001925060200280828437600081840152601f19601f8201169050808301925050508481038252858181548152602001915080548015612cad57602002820191906000526020600020905b815481526020019060010190808311612c99575b505098505050505050505050602060405180830381600087803b158015612cd357600080fd5b505af1158015612ce7573d6000803e3d6000fd5b505050506040513d6020811015612cfd57600080fd5b8101908080519060200190929190505050905080612d66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806139f9602f913960400191505060405180910390fd5b60005a860390505a955087602e60008a815260200190815260200160002081905550612d9188611f9c565b603181905550603154603060006031548152602001908152602001600020819055507f641830526c905804af3625676cc835cb33e4b5da323f21948a17d5404687ca49886040518082815260200191505060405180910390a15a8684010392507f853720e5a853f80d6ab997d85a0ddd977b89b1e70cc4a1303975d10974c60e158382604051808381526020018281526020019250505060405180910390a16001965050505050505095945050505050565b6000808251905060035460025411612ea6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806139d66023913960400191505060405180910390fd5b60035460025403811115612eef576000600354600254038203905060008090505b81811015612ee357600185510385528080600101915050612ec7565b50600354600254039150505b6000806000806000612eff613941565b60008060035490505b88600354018110156130f85760288b600354830381518110612f2657fe5b6020026020010151901b955060016002548201039650612f458161373f565b97506000881415612f96578560058960218110612f5e57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055506130eb565b6000600190505b8881116130a857600060028981612fb057fe5b0614156130345760056001820360218110612fc757fe5b0160009054906101000a900460281b955086945060405186815285601b8201526020856036836002600019fa9350836000811461300357613005565bfe5b505060288460006001811061301657fe5b6020020151901b96506002600189038161302c57fe5b04975061309b565b869550600460009054906101000a900460281b945060405186815285601b8201526020856036836002600019fa9350836000811461307157613073565bfe5b505060288460006001811061308457fe5b6020020151901b96506002888161309757fe5b0497505b8080600101915050612f9d565b5085600589602181106130b757fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b8080600101915050612f08565b5060006001880190505b600154811161320f5760006002888161311757fe5b06141561319b576005600182036021811061312e57fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa9250826000811461316a5761316c565bfe5b505060288360006001811061317d57fe5b6020020151901b95506002600188038161319357fe5b049650613202565b859450600460009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa925082600081146131d8576131da565bfe5b50506028836000600181106131eb57fe5b6020020151901b9550600287816131fe57fe5b0496505b8080600101915050613102565b508160006001811061321d57fe5b602002015198507f8ec50f97970775682a68d3c6f9caedf60fd82448ea40706b8b65d6c03648b9226003548b8b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b8381101561329957808201518184015260208101905061327e565b5050505090500194505050505060405180910390a1876003600082825401925050819055508898505050505050505050919050565b6000630f1d6e6c60e01b63d7cc65e960e01b6346657fe960e01b63cf04fb9460e01b181818905090565b61330061243f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613a6f602e913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156133bd57600080fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06133e661243f565b82604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1613464816137eb565b50565b613471828261382e565b5050565b6000602a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16613528576135218383612838565b90506135e9565b8273ffffffffffffffffffffffffffffffffffffffff16602860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490505b92915050565b60006135f961243f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461367c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613a6f602e913960400191505060405180910390fd5b600160276000630f1d6e6c60e01b63d7cc65e960e01b6346657fe960e01b63cf04fb9460e01b1818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905090565b60008060001b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b8316149050919050565b600080905060016002838161375057fe5b0614156137b1576000600190506000600290506000600182901b90505b60008414156137ad576000818360018801038161378657fe5b061415613795578293506137a8565b809150600181901b905082806001019350505b61376d565b5050505b919050565b60008060006301ffc9a760e01b905060405181815284600482015260208160248389617530fa93508051925050509250929050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b602b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635df8122f83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561390357600080fd5b505af1158015613917573d6000803e3d6000fd5b505050505050565b6040518060600160405280600390602082028038833980820191505090505090565b6040518060200160405280600190602082028038833980820191505090505090565b82805482825590600052602060002090810192821561399f579160200282015b8281111561399e578235825591602001919060010190613983565b5b5090506139ac91906139b0565b5090565b6139d291905b808211156139ce5760008160009055506001016139b6565b5090565b9056fe5468657265206973206e6f207370616365206c65667420696e2074686520747265652e5468652070726f6f6620686173206e6f74206265656e2076657269666965642062792074686520636f6e7472616374546865204d534120636f6d6d69746d656e7420287768696368206973206265696e672075706461746564292068617320616c7265616479206265656e206e756c6c696669656421596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e546865204d534120636f6d6d69746d656e7420616c7265616479206578697374732154686520696e70757420726f6f7420686173206e65766572206265656e2074686520726f6f74206f6620746865204d65726b6c652054726565546865206e657720636f6d6d69746d656e747320285f6e65774d5341436f6d6d69746d656e7420616e64205f6e6577504f436f6d6d69746d656e7429206d75737420626520646966666572656e74217075626c6963496e707574486173682063616e6e6f74206265207265636f6e63696c656454686520504f20636f6d6d69746d656e7420616c72656164792065786973747321a265627a7a72315820dfd4e5b3e6b061c28c6588a32e25291c323d7406dacd2d0f9658db820794799b64736f6c63430005110032596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
	"sourceMap": "437:8370:19:-;;;2125:1:11;2100:26;;2161:10;;2156:1;:15;2132:39;;2788:56;2766:78;;;;;;;;;;;;;;;;;;;;;;1974:257:19;8:9:-1;5:2;;;30:1;27;20:12;5:2;1974:257:19;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1974:257:19;;;;;;;;;;;;;;;;;;;;;;;;;2069:8;810:20:13;819:10;810:8;;;:20;;:::i;:::-;718:40:1;385:10;737:20;;718:18;;;:40;;:::i;:::-;172:15:2;:13;;;:15;;:::i;:::-;;802:22:15;768:15;;:57;;;;;;;;;;;;;;;;;;479:353;2089:7:19;:5;;;:7;;:::i;:::-;;2127:9;2106:8;;:31;;;;;;;;;;;;;;;;;;2147:15;:13;;;:15;;:::i;:::-;;2172:52;;;;;;;;;;;;;;;;;;2218:4;2172:26;;;:52;;:::i;:::-;1974:257;;437:8370;;1052:73:13;1112:8;1103:6;;:17;;;;;;;;;;;;;;;;;;1052:73;:::o;1442:190:1:-;1532:10;1517:25;;:11;:25;;;;;1509:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1621:4;1585:20;:33;1606:11;1585:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;1442:190;:::o;2237:314:19:-;2288:4;608:7:13;:5;;;:7;;:::i;:::-;594:21;;:10;:21;;;586:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2519:4:19;2304:19;:212;2493:22;;;2439:23;;;2383:25;;;2324:28;;;:84;:138;:191;2304:212;;;;;;;;;;;;;;;;;;:219;;;;;;;;;;;;;;;;;;2540:4;2533:11;;2237:314;:::o;930:71:13:-;968:7;990:6;;;;;;;;;;;983:13;;930:71;:::o;1219:282:15:-;1330:21;1381:15;1364:33;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1364:33:15;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1364:33:15;;;1354:44;;;;;;1330:68;;1408:15;;;;;;;;;;;:39;;;1456:4;1463:13;1478:15;1408:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1408:86:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1408:86:15;;;;1219:282;;;:::o;437:8370:19:-;;;;;;;",
	"source": "/**\nContract to enable the management of private fungible token (ERC-20) transactions using zk-SNARKs.\n@Author Westlad, Chaitanya-Konda, iAmMichaelConnor\n*/\n\npragma solidity ^0.5.8;\n\n//TODO: Use openzeppelin interfaces inside the timber service\nimport \"./ERC165Compatible.sol\";\nimport \"./MerkleTree.sol\";\nimport \"./IShield.sol\";\nimport \"./IVerifier.sol\";\nimport \"./Registrar.sol\";\nimport \"./Ownable.sol\";\nimport \"./ERC20Interface.sol\";\n\ncontract Shield is Ownable, MerkleTree, ERC165Compatible, Registrar, IShield {\n    // ENUMS:\n    enum TransactionTypes { CreateMSA, CreatePO }\n\n    // EVENTS:\n    // Observers may wish to listen for nullification of commitments:\n    event NewCommitment(bytes32 newCommitment);\n    event UpdatedCommitment(bytes32 nullifier, bytes32 newCommitment);\n    event DeletedCommitment(bytes32 nullifier);\n\n    // Observers may wish to listen for zkSNARK-related changes:\n    event VerifierChanged(address newVerifierContract);\n    event VkChanged(TransactionTypes txType);\n\n    // For testing only. This SHOULD be deleted before mainnet deployment:\n    event GasUsed(uint256 byShieldContract, uint256 byVerifierContract);\n\n    // CONTRACT INSTANCES:\n    IVerifier private verifier; // the verification smart contract\n    ERC20Interface private erc20ContractInstance; // the  ERC-20 token contract\n\n    // PRIVATE TRANSACTIONS' PUBLIC STATES:\n    mapping(bytes32 => bytes32) public commitments; // store commitments\n    mapping(bytes32 => bytes32) public nullifiers; // store nullifiers of spent commitments\n    mapping(bytes32 => bytes32) public roots; // holds each root we've calculated so that we can pull the one relevant to the prover\n    bytes32 public latestRoot; // holds the index for the latest root so that the prover can provide it later and this contract can look up the relevant root\n\n    // VERIFICATION KEY STORAGE:\n    mapping(uint => uint256[]) public vks; // mapped to by an enum uint(TransactionTypes):\n\n    // FUNCTIONS:\n    constructor(address _verifier, address _erc1820) public Ownable() ERC165Compatible() Registrar(_erc1820) {\n        owner();\n        verifier = IVerifier(_verifier);\n        setInterfaces();\n        setInterfaceImplementation(\"IShield\", address(this));\n    }\n\n    function setInterfaces() public onlyOwner returns (bool) {\n        supportedInterfaces[this.changeVerifier.selector ^\n                            this.getVerifier.selector ^\n                            this.createMSA.selector ^\n                            this.createPO.selector] = true;\n        return true;\n    }\n\n    function getInterfaces() external pure returns (bytes4) {\n        return this.changeVerifier.selector ^\n                this.getVerifier.selector ^\n                this.createMSA.selector ^\n                this.createPO.selector;\n    }\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return supportedInterfaces[interfaceId];\n    }\n\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) external view returns(bytes32) {\n        return ERC1820_ACCEPT_MAGIC;\n    }\n\n    function assignManager(address _oldManager, address _newManager) external {\n        assignManagement(_oldManager, _newManager);\n    }\n\n    /**\n    self destruct\n    */\n    function close() external onlyOwner returns (bool) {\n        selfdestruct(address(uint160(owner())));\n        return true;\n    }\n\n    /**\n    function to change the address of the underlying Verifier contract\n    */\n    function changeVerifier(address _verifier) external onlyOwner returns (bool) {\n        verifier = IVerifier(_verifier);\n        emit VerifierChanged(_verifier);\n        return true;\n    }\n\n    /**\n    returns the verifier-interface contract address that this shield contract is calling\n    */\n    function getVerifier() external view returns (address) {\n        return address(verifier);\n    }\n\n    /**\n    Stores verification keys (for the 'mint', 'transfer' and 'burn' computations).\n    */\n    function registerVerificationKey(\n        uint256[] calldata _vk,\n        TransactionTypes _txType\n    ) external onlyOwner returns (bytes32) {\n        // CAUTION: we do not prevent overwrites of vk's. Users must listen for the emitted event to detect updates to a vk.\n        vks[uint(_txType)] = _vk;\n\n        emit VkChanged(_txType);\n    }\n\n    /**\n    createMSA\n    */\n    function createMSA(\n        uint256[] calldata _proof,\n        uint256[] calldata _inputs,\n        bytes32 _newMSACommitment\n    ) external returns (bool) {\n\n        // gas measurement:\n        uint256 gasCheckpoint = gasleft();\n\n        // Check that the publicInputHash equals the hash of the 'public inputs':\n        bytes31 publicInputHash = bytes31(bytes32(_inputs[0]) << 8);\n        bytes31 publicInputHashCheck = bytes31(sha256(abi.encodePacked(_newMSACommitment)) << 8);\n        require(publicInputHashCheck == publicInputHash, \"publicInputHash cannot be reconciled\");\n\n        // gas measurement:\n        uint256 gasUsedByShieldContract = gasCheckpoint - gasleft();\n        gasCheckpoint = gasleft();\n\n        // verify the proof\n        bool result = verifier.verify(_proof, _inputs, vks[uint(TransactionTypes.CreateMSA)]);\n        require(result, \"The proof has not been verified by the contract\");\n\n        // gas measurement:\n        uint256 gasUsedByVerifierContract = gasCheckpoint - gasleft();\n        gasCheckpoint = gasleft();\n\n        // check inputs vs on-chain states\n        // COMMENTED OUT THE BELOW, FOR QUICKER REPEATED TESTING.\n        // require(commitments[_newMSACommitment] == 0, \"The MSA commitment already exists!\");\n\n        // update contract states\n        commitments[_newMSACommitment] = _newMSACommitment;\n        latestRoot = insertLeaf(_newMSACommitment); // recalculate the root of the merkleTree as it's now different\n        roots[latestRoot] = latestRoot; // and save the new root to the list of roots\n\n        emit NewCommitment(_newMSACommitment);\n\n        // gas measurement:\n        gasUsedByShieldContract = gasUsedByShieldContract + gasCheckpoint - gasleft();\n        emit GasUsed(gasUsedByShieldContract, gasUsedByVerifierContract);\n        return true;\n    }\n\n    /**\n    createPO\n    */\n    function createPO(\n        uint256[] calldata _proof,\n        uint256[] calldata _inputs,\n        bytes32 _root,\n        bytes32 _nullifierOfOldMSACommitment,\n        bytes32 _newMSACommitment,\n        bytes32 _newPOCommitment\n    ) external returns(bool) {\n\n        // gas measurement:\n        uint256[3] memory gasUsed; // array needed to stay below local stack limit\n        gasUsed[0] = gasleft();\n\n        // Check that the publicInputHash equals the hash of the 'public inputs':\n        bytes31 publicInputHash = bytes31(bytes32(_inputs[0]) << 8);\n        bytes31 publicInputHashCheck = bytes31(sha256(abi.encodePacked(_root, _nullifierOfOldMSACommitment, _newMSACommitment, _newPOCommitment)) << 8);\n        require(publicInputHashCheck == publicInputHash, \"publicInputHash cannot be reconciled\");\n\n        // gas measurement:\n        gasUsed[1] = gasUsed[0] - gasleft();\n        gasUsed[0] = gasleft();\n\n        // verify the proof\n        bool result = verifier.verify(_proof, _inputs, vks[uint(TransactionTypes.CreatePO)]);\n        require(result, \"The proof has not been verified by the contract\");\n\n        // gas measurement:\n        gasUsed[2] = gasUsed[0] - gasleft();\n        gasUsed[0] = gasleft();\n\n        // check inputs vs on-chain states\n        require(roots[_root] == _root, \"The input root has never been the root of the Merkle Tree\");\n        require(_newMSACommitment != _newPOCommitment, \"The new commitments (_newMSACommitment and _newPOCommitment) must be different!\"); // Is this check necessary?\n        require(commitments[_newMSACommitment] == 0, \"The MSA commitment already exists!\");\n        require(nullifiers[_nullifierOfOldMSACommitment] == 0, \"The MSA commitment (which is being updated) has already been nullified!\");\n        require(commitments[_newPOCommitment] == 0, \"The PO commitment already exists!\");\n\n        // update contract states\n        nullifiers[_nullifierOfOldMSACommitment] = _nullifierOfOldMSACommitment; //remember we spent it\n\n        bytes32[] memory leaves = new bytes32[](2);\n        leaves[0] = _newMSACommitment;\n        leaves[1] = _newPOCommitment;\n\n        latestRoot = insertLeaves(leaves); // recalculate the root of the merkleTree as it's now different\n        roots[latestRoot] = latestRoot; // and save the new root to the list of roots\n\n        emit UpdatedCommitment(_nullifierOfOldMSACommitment, _newMSACommitment);\n        emit NewCommitment(_newPOCommitment);\n\n        // gas measurement:\n        gasUsed[1] = gasUsed[1] + gasUsed[0] - gasleft();\n        emit GasUsed(gasUsed[1], gasUsed[2]);\n        return true;\n    }\n}\n",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.17+commit.d19bba13.js"
	}
}
