{
	"schemaVersion": "2.0.0",
	"contractName": "OrgRegistry",
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_erc1820",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "addr",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "interfaceHash",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "implementer",
					"type": "address"
				}
			],
			"name": "InterfaceImplementerSet",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "addr",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newManager",
					"type": "address"
				}
			],
			"name": "ManagerChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "_name",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "_address",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "_role",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "bytes",
					"name": "_messagingKey",
					"type": "bytes"
				},
				{
					"indexed": false,
					"internalType": "bytes",
					"name": "_zkpPublicKey",
					"type": "bytes"
				}
			],
			"name": "RegisterOrg",
			"type": "event"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "_owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "_oldManager",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_newManager",
					"type": "address"
				}
			],
			"name": "assignManager",
			"outputs": [],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "interfaceHash",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "addr",
					"type": "address"
				}
			],
			"name": "canImplementInterfaceForAddress",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "getInterfaceAddresses",
			"outputs": [
				{
					"internalType": "bytes32[]",
					"name": "",
					"type": "bytes32[]"
				},
				{
					"internalType": "address[]",
					"name": "",
					"type": "address[]"
				},
				{
					"internalType": "address[]",
					"name": "",
					"type": "address[]"
				},
				{
					"internalType": "address[]",
					"name": "",
					"type": "address[]"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "_addr",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "_interfaceHash",
					"type": "bytes32"
				}
			],
			"name": "getInterfaceImplementer",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "getInterfaces",
			"outputs": [
				{
					"internalType": "bytes4",
					"name": "",
					"type": "bytes4"
				}
			],
			"payable": false,
			"stateMutability": "pure",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "_addr",
					"type": "address"
				}
			],
			"name": "getManager",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "_address",
					"type": "address"
				}
			],
			"name": "getOrg",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				},
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "",
					"type": "bytes"
				},
				{
					"internalType": "bytes",
					"name": "",
					"type": "bytes"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "getOrgCount",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "getOrgs",
			"outputs": [
				{
					"internalType": "address[]",
					"name": "",
					"type": "address[]"
				},
				{
					"internalType": "bytes32[]",
					"name": "",
					"type": "bytes32[]"
				},
				{
					"internalType": "uint256[]",
					"name": "",
					"type": "uint256[]"
				},
				{
					"internalType": "bytes[]",
					"name": "",
					"type": "bytes[]"
				},
				{
					"internalType": "bytes[]",
					"name": "",
					"type": "bytes[]"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "_contract",
					"type": "address"
				},
				{
					"internalType": "bytes4",
					"name": "_interfaceId",
					"type": "bytes4"
				}
			],
			"name": "implementsERC165Interface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "_contract",
					"type": "address"
				},
				{
					"internalType": "bytes4",
					"name": "_interfaceId",
					"type": "bytes4"
				}
			],
			"name": "implementsERC165InterfaceNoCache",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "address",
					"name": "addr",
					"type": "address"
				},
				{
					"internalType": "string",
					"name": "_interfaceLabel",
					"type": "string"
				}
			],
			"name": "interfaceAddr",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "string",
					"name": "_interfaceName",
					"type": "string"
				}
			],
			"name": "interfaceHash",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"payable": false,
			"stateMutability": "pure",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "_groupName",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "_tokenAddress",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_shieldAddress",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_verifierAddress",
					"type": "address"
				}
			],
			"name": "registerInterfaces",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "_address",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "_name",
					"type": "bytes32"
				},
				{
					"internalType": "uint256",
					"name": "_role",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "_messagingKey",
					"type": "bytes"
				},
				{
					"internalType": "bytes",
					"name": "_zkpPublicKey",
					"type": "bytes"
				}
			],
			"name": "registerOrg",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "_addr",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "_interfaceHash",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "_implementer",
					"type": "address"
				}
			],
			"name": "setInterfaceImplementer",
			"outputs": [],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [],
			"name": "setInterfaces",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "_addr",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_newManager",
					"type": "address"
				}
			],
			"name": "setManager",
			"outputs": [],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": true,
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"payable": false,
			"stateMutability": "view",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"constant": false,
			"inputs": [
				{
					"internalType": "address",
					"name": "_contract",
					"type": "address"
				},
				{
					"internalType": "bytes4",
					"name": "_interfaceId",
					"type": "bytes4"
				}
			],
			"name": "updateERC165Cache",
			"outputs": [],
			"payable": false,
			"stateMutability": "nonpayable",
			"type": "function"
		}
	],
	"bytecode": "0x60806040523480156200001157600080fd5b5060405162003bb838038062003bb8833981810160405262000037919081019062000453565b8062000049336200011360201b60201c565b620000616301ffc9a760e01b6200015660201b60201c565b620000716200022e60201b60201c565b5080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620000c46200022e60201b60201c565b506200010c6040518060400160405280600c81526020017f494f726752656769737472790000000000000000000000000000000000000000815250306200034c60201b60201c565b50620006d1565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415620001c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001b990620005d8565b60405180910390fd5b6001806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000620002406200041360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002b0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002a790620005fa565b60405180910390fd5b60016002600063df68b63360e01b6323d2625360e01b63ede7677560e01b637084a4a960e01b63a332aed860e01b181818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905090565b60008260405160200162000361919062000582565b604051602081830303815290604052805190602001209050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329965a1d3083856040518463ffffffff1660e01b8152600401620003da939291906200059b565b600060405180830381600087803b158015620003f557600080fd5b505af11580156200040a573d6000803e3d6000fd5b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000815190506200044d81620006b7565b92915050565b6000602082840312156200046657600080fd5b600062000476848285016200043c565b91505092915050565b6200048a8162000643565b82525050565b6200049b8162000657565b82525050565b6000620004ae826200061c565b620004ba818562000638565b9350620004cc81856020860162000681565b80840191505092915050565b6000620004e7601c8362000627565b91507f4552433136353a20696e76616c696420696e74657266616365206964000000006000830152602082019050919050565b600062000529602e8362000627565b91507f596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6560008301527f20746869732066756e6374696f6e0000000000000000000000000000000000006020830152604082019050919050565b6000620005908284620004a1565b915081905092915050565b6000606082019050620005b260008301866200047f565b620005c1602083018562000490565b620005d060408301846200047f565b949350505050565b60006020820190508181036000830152620005f381620004d8565b9050919050565b6000602082019050818103600083015262000615816200051a565b9050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000620006508262000661565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015620006a157808201518184015260208101905062000684565b83811115620006b1576000848401525b50505050565b620006c28162000643565b8114620006ce57600080fd5b50565b6134d780620006e16000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063a332aed8116100c3578063ebac15f91161007c578063ebac15f914610405578063ede7677514610423578063f2fde38b14610445578063f37f6a3414610461578063f712f3e81461047d578063fca85eb3146104ad5761014d565b8063a332aed81461031a578063a41e7d511461034a578063aabbb8ca14610366578063b2bdfa7b14610396578063b7056765146103b4578063df68b633146103e45761014d565b80633d584063116101155780633d58406314610220578063449a09a4146102505780635df8122f1461028057806365ba36c11461029c5780637084a4a9146102cc5780638da5cb5b146102fc5761014d565b806301ffc9a7146101525780631f1f86521461018257806323d26253146101b6578063249cb3fa146101d457806329965a1d14610204575b600080fd5b61016c60048036036101679190810190612901565b6104cb565b6040516101799190613075565b60405180910390f35b61019c600480360361019791908101906125dc565b610533565b6040516101ad959493929190612f3d565b60405180910390f35b6101be6107f3565b6040516101cb9190613214565b60405180910390f35b6101ee60048036036101e99190810190612862565b610800565b6040516101fb9190613090565b60405180910390f35b61021e600480360361021991908101906126a6565b61082f565b005b61023a600480360361023591908101906125dc565b610b7c565b6040516102479190612ed0565b60405180910390f35b61026a600480360361026591908101906127e1565b610c81565b6040516102779190612ed0565b60405180910390f35b61029a6004803603610295919081019061262e565b610d66565b005b6102b660048036036102b1919081019061292a565b610ef3565b6040516102c39190613090565b60405180910390f35b6102e660048036036102e1919081019061289e565b610f26565b6040516102f39190613075565b60405180910390f35b6103046110a0565b6040516103119190612ed0565b60405180910390f35b610334600480360361032f91908101906126f5565b6110c9565b6040516103419190613075565b60405180910390f35b610364600480360361035f91908101906127a5565b6113b0565b005b610380600480360361037b919081019061266a565b61151f565b60405161038d9190612ed0565b60405180910390f35b61039e61160e565b6040516103ab9190612ed0565b60405180910390f35b6103ce60048036036103c991908101906127a5565b611633565b6040516103db9190613075565b60405180910390f35b6103ec6116e8565b6040516103fc9493929190613014565b60405180910390f35b61040d611970565b60405161041a9190613139565b60405180910390f35b61042b6119a3565b60405161043c959493929190612f9e565b60405180910390f35b61045f600480360361045a91908101906125dc565b611d9c565b005b61047b6004803603610476919081019061262e565b611e97565b005b610497600480360361049291908101906127a5565b611ea5565b6040516104a49190613075565b60405180910390f35b6104b561201f565b6040516104c29190613075565b60405180910390f35b600060026000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6000806000606080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561073d5780601f106107125761010080835404028352916020019161073d565b820191906000526020600020905b81548152906001019060200180831161072057829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107d95780601f106107ae576101008083540402835291602001916107d9565b820191906000526020600020905b8154815290600101906020018083116107bc57829003601f168201915b505050505090509450945094509450945091939590929450565b6000600b80549050905090565b600060405160200161081190612ebb565b60405160208183030381529060405280519060200120905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461086a578361086c565b335b90503373ffffffffffffffffffffffffffffffffffffffff1661088e82610b7c565b73ffffffffffffffffffffffffffffffffffffffff16146108e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108db90613154565b60405180910390fd5b6108ed83612132565b1561092d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610924906131b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561099657503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15610a8c576040516020016109aa90612ebb565b604051602081830303815290604052805190602001208273ffffffffffffffffffffffffffffffffffffffff1663249cb3fa85846040518363ffffffff1660e01b81526004016109fb9291906130ab565b60206040518083038186803b158015610a1357600080fd5b505afa158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a4b9190810190612839565b14610a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a82906131f4565b60405180910390fd5b5b81600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16838273ffffffffffffffffffffffffffffffffffffffff167f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15360405160405180910390a450505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c1957819050610c7c565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b6000808383604051602001610c97929190612ea2565b604051602081830303815290604052805190602001209050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aabbb8ca86836040518363ffffffff1660e01b8152600401610d0c929190612f14565b60206040518083038186803b158015610d2457600080fd5b505afa158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d5c9190810190612605565b9150509392505050565b3373ffffffffffffffffffffffffffffffffffffffff16610d8683610b7c565b73ffffffffffffffffffffffffffffffffffffffff1614610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390613154565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e155780610e18565b60005b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a35050565b60008282604051602001610f08929190612ea2565b60405160208183030381529060405280519060200120905092915050565b600060405180608001604052808681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152506008600060095481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060096000815480929190600101919050555060019050949350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006110d36123dd565b6040518060a001604052808a73ffffffffffffffffffffffffffffffffffffffff16815260200189815260200188815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525090506111bf89600a60008a815260200190815260200160002061216290919063ffffffff16565b80600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003019080519060200190611276929190612425565b506080820151816004019080519060200190611293929190612425565b50905050600b819080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301908051906020019061133c929190612425565b506080820151816004019080519060200190611359929190612425565b505050507f3d4e220a8980e25dcecd0d4385d107ce02d6f5ca6d6a25822a5e03ec24ae152b888a898989898960405161139897969594939291906130d4565b60405180910390a16001915050979650505050505050565b6113ba8282611633565b6113c55760006113c7565b815b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461155c578361155e565b335b905061156983612132565b1561159357600083905061157d8282611ea5565b61158857600061158a565b815b92505050611608565b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000611649856301ffc9a760e01b61220a565b809250819350505060008214806116605750600081145b15611670576000925050506116e2565b6116818563ffffffff60e01b61220a565b80925081935050506000821480611699575060008114155b156116a9576000925050506116e2565b6116b3858561220a565b80925081935050506001821480156116cb5750600181145b156116db576001925050506116e2565b6000925050505b92915050565b60608060608060606009546040519080825280602002602001820160405280156117215781602001602082028038833980820191505090505b50905060606009546040519080825280602002602001820160405280156117575781602001602082028038833980820191505090505b509050606060095460405190808252806020026020018201604052801561178d5781602001602082028038833980820191505090505b50905060606009546040519080825280602002602001820160405280156117c35781602001602082028038833980820191505090505b50905060008090505b60095481101561195957600060086000838152602001908152602001600020905080600001548683815181106117fe57fe5b6020026020010181815250508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685838151811061183b57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168483815181106118a657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683838151811061191157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505080806001019150506117cc565b508383838397509750975097505050505090919293565b600063df68b63360e01b6323d2625360e01b63ede7677560e01b637084a4a960e01b63a332aed860e01b18181818905090565b606080606080606080600b805490506040519080825280602002602001820160405280156119e05781602001602082028038833980820191505090505b5090506060600b80549050604051908082528060200260200182016040528015611a195781602001602082028038833980820191505090505b5090506060600b80549050604051908082528060200260200182016040528015611a525781602001602082028038833980820191505090505b5090506060600b80549050604051908082528060200260200182016040528015611a9057816020015b6060815260200190600190039081611a7b5790505b5090506060600b80549050604051908082528060200260200182016040528015611ace57816020015b6060815260200190600190039081611ab95790505b50905060008090505b600b80549050811015611d8057600b8181548110611af157fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868281518110611b2f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b8181548110611b7657fe5b906000526020600020906005020160010154858281518110611b9457fe5b602002602001018181525050600b8181548110611bad57fe5b906000526020600020906005020160020154848281518110611bcb57fe5b602002602001018181525050600b8181548110611be457fe5b90600052602060002090600502016003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c895780601f10611c5e57610100808354040283529160200191611c89565b820191906000526020600020905b815481529060010190602001808311611c6c57829003601f168201915b5050505050838281518110611c9a57fe5b6020026020010181905250600b8181548110611cb257fe5b90600052602060002090600502016004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d575780601f10611d2c57610100808354040283529160200191611d57565b820191906000526020600020905b815481529060010190602001808311611d3a57829003601f168201915b5050505050828281518110611d6857fe5b60200260200101819052508080600101915050611ad7565b5084848484849950995099509950995050505050509091929394565b611da46110a0565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0890613194565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e4b57600080fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0611e746110a0565b82604051611e83929190612eeb565b60405180910390a1611e948161223f565b50565b611ea18282612282565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16611f5857611f518383611633565b9050612019565b8273ffffffffffffffffffffffffffffffffffffffff16600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490505b92915050565b60006120296110a0565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612096576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208d90613194565b60405180910390fd5b60016002600063df68b63360e01b6323d2625360e01b63ede7677560e01b637084a4a960e01b63a332aed860e01b181818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905090565b60008060001b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b8316149050919050565b61216c8282612315565b156121ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a390613174565b60405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008060006301ffc9a760e01b905060405181815284600482015260208160248389617530fa93508051925050509250929050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635df8122f83836040518363ffffffff1660e01b81526004016122df929190612eeb565b600060405180830381600087803b1580156122f957600080fd5b505af115801561230d573d6000803e3d6000fd5b505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237d906131d4565b60405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681526020016000815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061246657805160ff1916838001178555612494565b82800160010185558215612494579182015b82811115612493578251825591602001919060010190612478565b5b5090506124a191906124a5565b5090565b6124c791905b808211156124c35760008160009055506001016124ab565b5090565b90565b6000813590506124d981613438565b92915050565b6000815190506124ee81613438565b92915050565b6000813590506125038161344f565b92915050565b6000815190506125188161344f565b92915050565b60008135905061252d81613466565b92915050565b60008083601f84011261254557600080fd5b8235905067ffffffffffffffff81111561255e57600080fd5b60208301915083600182028301111561257657600080fd5b9250929050565b60008083601f84011261258f57600080fd5b8235905067ffffffffffffffff8111156125a857600080fd5b6020830191508360018202830111156125c057600080fd5b9250929050565b6000813590506125d68161347d565b92915050565b6000602082840312156125ee57600080fd5b60006125fc848285016124ca565b91505092915050565b60006020828403121561261757600080fd5b6000612625848285016124df565b91505092915050565b6000806040838503121561264157600080fd5b600061264f858286016124ca565b9250506020612660858286016124ca565b9150509250929050565b6000806040838503121561267d57600080fd5b600061268b858286016124ca565b925050602061269c858286016124f4565b9150509250929050565b6000806000606084860312156126bb57600080fd5b60006126c9868287016124ca565b93505060206126da868287016124f4565b92505060406126eb868287016124ca565b9150509250925092565b600080600080600080600060a0888a03121561271057600080fd5b600061271e8a828b016124ca565b975050602061272f8a828b016124f4565b96505060406127408a828b016125c7565b955050606088013567ffffffffffffffff81111561275d57600080fd5b6127698a828b01612533565b9450945050608088013567ffffffffffffffff81111561278857600080fd5b6127948a828b01612533565b925092505092959891949750929550565b600080604083850312156127b857600080fd5b60006127c6858286016124ca565b92505060206127d78582860161251e565b9150509250929050565b6000806000604084860312156127f657600080fd5b6000612804868287016124ca565b935050602084013567ffffffffffffffff81111561282157600080fd5b61282d8682870161257d565b92509250509250925092565b60006020828403121561284b57600080fd5b600061285984828501612509565b91505092915050565b6000806040838503121561287557600080fd5b6000612883858286016124f4565b9250506020612894858286016124ca565b9150509250929050565b600080600080608085870312156128b457600080fd5b60006128c2878288016124f4565b94505060206128d3878288016124ca565b93505060406128e4878288016124ca565b92505060606128f5878288016124ca565b91505092959194509250565b60006020828403121561291357600080fd5b60006129218482850161251e565b91505092915050565b6000806020838503121561293d57600080fd5b600083013567ffffffffffffffff81111561295757600080fd5b6129638582860161257d565b92509250509250929050565b600061297b83836129cb565b60208301905092915050565b60006129938383612b87565b60208301905092915050565b60006129ab8383612c1a565b905092915050565b60006129bf8383612e84565b60208301905092915050565b6129d481613367565b82525050565b6129e381613367565b82525050565b60006129f48261326f565b6129fe81856132e5565b9350612a098361322f565b8060005b83811015612a3a578151612a21888261296f565b9750612a2c836132b1565b925050600181019050612a0d565b5085935050505092915050565b6000612a528261327a565b612a5c81856132f6565b9350612a678361323f565b8060005b83811015612a98578151612a7f8882612987565b9750612a8a836132be565b925050600181019050612a6b565b5085935050505092915050565b6000612ab082613285565b612aba8185613307565b935083602082028501612acc8561324f565b8060005b85811015612b085784840389528151612ae9858261299f565b9450612af4836132cb565b925060208a01995050600181019050612ad0565b50829750879550505050505092915050565b6000612b2582613290565b612b2f8185613318565b9350612b3a8361325f565b8060005b83811015612b6b578151612b5288826129b3565b9750612b5d836132d8565b925050600181019050612b3e565b5085935050505092915050565b612b8181613379565b82525050565b612b9081613385565b82525050565b612b9f81613385565b82525050565b612bae8161338f565b82525050565b6000612bc0838561333a565b9350612bcd8385846133e5565b612bd683613427565b840190509392505050565b6000612bec826132a6565b612bf6818561333a565b9350612c068185602086016133f4565b612c0f81613427565b840191505092915050565b6000612c258261329b565b612c2f8185613329565b9350612c3f8185602086016133f4565b612c4881613427565b840191505092915050565b6000612c5f838561335c565b9350612c6c8385846133e5565b82840190509392505050565b6000612c85600f8361334b565b91507f4e6f7420746865206d616e6167657200000000000000000000000000000000006000830152602082019050919050565b6000612cc5601f8361334b565b91507f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006000830152602082019050919050565b6000612d05602e8361334b565b91507f596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6560008301527f20746869732066756e6374696f6e0000000000000000000000000000000000006020830152604082019050919050565b6000612d6b601a8361334b565b91507f4d757374206e6f7420626520616e2045524331363520686173680000000000006000830152602082019050919050565b6000612dab60228361334b565b91507f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612e1160148361335c565b91507f455243313832305f4143434550545f4d414749430000000000000000000000006000830152601482019050919050565b6000612e5160208361334b565b91507f446f6573206e6f7420696d706c656d656e742074686520696e746572666163656000830152602082019050919050565b612e8d816133db565b82525050565b612e9c816133db565b82525050565b6000612eaf828486612c53565b91508190509392505050565b6000612ec682612e04565b9150819050919050565b6000602082019050612ee560008301846129da565b92915050565b6000604082019050612f0060008301856129da565b612f0d60208301846129da565b9392505050565b6000604082019050612f2960008301856129da565b612f366020830184612b96565b9392505050565b600060a082019050612f5260008301886129da565b612f5f6020830187612b96565b612f6c6040830186612e93565b8181036060830152612f7e8185612be1565b90508181036080830152612f928184612be1565b90509695505050505050565b600060a0820190508181036000830152612fb881886129e9565b90508181036020830152612fcc8187612a47565b90508181036040830152612fe08186612b1a565b90508181036060830152612ff48185612aa5565b905081810360808301526130088184612aa5565b90509695505050505050565b6000608082019050818103600083015261302e8187612a47565b9050818103602083015261304281866129e9565b9050818103604083015261305681856129e9565b9050818103606083015261306a81846129e9565b905095945050505050565b600060208201905061308a6000830184612b78565b92915050565b60006020820190506130a56000830184612b96565b92915050565b60006040820190506130c06000830185612b96565b6130cd60208301846129da565b9392505050565b600060a0820190506130e9600083018a612b96565b6130f660208301896129da565b6131036040830188612e93565b8181036060830152613116818688612bb4565b9050818103608083015261312b818486612bb4565b905098975050505050505050565b600060208201905061314e6000830184612ba5565b92915050565b6000602082019050818103600083015261316d81612c78565b9050919050565b6000602082019050818103600083015261318d81612cb8565b9050919050565b600060208201905081810360008301526131ad81612cf8565b9050919050565b600060208201905081810360008301526131cd81612d5e565b9050919050565b600060208201905081810360008301526131ed81612d9e565b9050919050565b6000602082019050818103600083015261320d81612e44565b9050919050565b60006020820190506132296000830184612e93565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613372826133bb565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156134125780820151818401526020810190506133f7565b83811115613421576000848401525b50505050565b6000601f19601f8301169050919050565b61344181613367565b811461344c57600080fd5b50565b61345881613385565b811461346357600080fd5b50565b61346f8161338f565b811461347a57600080fd5b50565b613486816133db565b811461349157600080fd5b5056fea365627a7a723158200d31c8e4dda36744076223dfb1fa888b03b9a341376ac248502b6830192988526c6578706572696d656e74616cf564736f6c63430005110040",
	"sourceMap": "498:9179:12:-;;;1789:185;8:9:-1;5:2;;;30:1;27;20:12;5:2;1789:185:12;;;;;;;;;;;;;;;;;;;;;;;;1865:8;810:20:13;819:10;810:8;;;:20;;:::i;:::-;718:40:1;385:10;737:20;;718:18;;;:40;;:::i;:::-;172:15:2;:13;;;:15;;:::i;:::-;;802:22:15;768:15;;:57;;;;;;;;;;;;;;;;;;479:353;1885:15:12;:13;;;:15;;:::i;:::-;;1910:57;;;;;;;;;;;;;;;;;;1961:4;1910:26;;;:57;;:::i;:::-;1789:185;498:9179;;1052:73:13;1112:8;1103:6;;:17;;;;;;;;;;;;;;;;;;1052:73;:::o;1442:190:1:-;1532:10;1517:25;;:11;:25;;;;;1509:66;;;;;;;;;;;;;;;;;;;;;;1621:4;1585:20;:33;1606:11;1585:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;1442:190;:::o;2304:478:12:-;2355:4;608:7:13;:5;;;:7;;:::i;:::-;594:21;;:10;:21;;;586:80;;;;;;;;;;;;;;;;;;;;;;2750:4:12;2464:19;:283;2711:35;;;2655:25;;;2603:21;;;2540:32;;;2484:25;;;:88;:140;:196;:262;2464:283;;;;;;;;;;;;;;;;;;:290;;;;;;;;;;;;;;;;;;2771:4;2764:11;;2304:478;:::o;1219:282:15:-;1330:21;1381:15;1364:33;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1364:33:15;;;1354:44;;;;;;1330:68;;1408:15;;;;;;;;;;;:39;;;1456:4;1463:13;1478:15;1408:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1408:86:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1408:86:15;;;;1219:282;;;:::o;930:71:13:-;968:7;990:6;;;;;;;;;;;983:13;;930:71;:::o;5:134:-1:-;;89:6;83:13;74:22;;101:33;128:5;101:33;;;68:71;;;;;146:263;;261:2;249:9;240:7;236:23;232:32;229:2;;;277:1;274;267:12;229:2;312:1;329:64;385:7;376:6;365:9;361:22;329:64;;;319:74;;291:108;223:186;;;;;416:113;499:24;517:5;499:24;;;494:3;487:37;481:48;;;536:113;619:24;637:5;619:24;;;614:3;607:37;601:48;;;656:360;;786:39;819:5;786:39;;;837:89;919:6;914:3;837:89;;;830:96;;931:52;976:6;971:3;964:4;957:5;953:16;931:52;;;1004:6;999:3;995:16;988:23;;766:250;;;;;;1024:328;;1184:67;1248:2;1243:3;1184:67;;;1177:74;;1284:30;1280:1;1275:3;1271:11;1264:51;1343:2;1338:3;1334:12;1327:19;;1170:182;;;;1361:383;;1521:67;1585:2;1580:3;1521:67;;;1514:74;;1621:34;1617:1;1612:3;1608:11;1601:55;1690:16;1685:2;1680:3;1676:12;1669:38;1735:2;1730:3;1726:12;1719:19;;1507:237;;;;1752:266;;1898:95;1989:3;1980:6;1898:95;;;1891:102;;2010:3;2003:10;;1879:139;;;;;2025:435;;2199:2;2188:9;2184:18;2176:26;;2213:71;2281:1;2270:9;2266:17;2257:6;2213:71;;;2295:72;2363:2;2352:9;2348:18;2339:6;2295:72;;;2378;2446:2;2435:9;2431:18;2422:6;2378:72;;;2170:290;;;;;;;2467:407;;2658:2;2647:9;2643:18;2635:26;;2708:9;2702:4;2698:20;2694:1;2683:9;2679:17;2672:47;2733:131;2859:4;2733:131;;;2725:139;;2629:245;;;;2881:407;;3072:2;3061:9;3057:18;3049:26;;3122:9;3116:4;3112:20;3108:1;3097:9;3093:17;3086:47;3147:131;3273:4;3147:131;;;3139:139;;3043:245;;;;3295:122;;3389:5;3383:12;3373:22;;3354:63;;;;3425:163;;3540:6;3535:3;3528:19;3577:4;3572:3;3568:14;3553:29;;3521:67;;;;;3597:145;;3733:3;3718:18;;3711:31;;;;;3750:91;;3812:24;3830:5;3812:24;;;3801:35;;3795:46;;;;3848:72;;3910:5;3899:16;;3893:27;;;;3927:121;;4000:42;3993:5;3989:54;3978:65;;3972:76;;;;4056:268;4121:1;4128:101;4142:6;4139:1;4136:13;4128:101;;;4218:1;4213:3;4209:11;4203:18;4199:1;4194:3;4190:11;4183:39;4164:2;4161:1;4157:10;4152:15;;4128:101;;;4244:6;4241:1;4238:13;4235:2;;;4309:1;4300:6;4295:3;4291:16;4284:27;4235:2;4105:219;;;;;4332:117;4401:24;4419:5;4401:24;;;4394:5;4391:35;4381:2;;4440:1;4437;4430:12;4381:2;4375:74;;498:9179:12;;;;;;;",
	"source": "pragma solidity ^0.5.8;\npragma experimental ABIEncoderV2;\n\n//TODO: Use openzeppelin interfaces inside the timber service\nimport \"./IOrgRegistry.sol\";\nimport \"./Registrar.sol\";\nimport \"./ERC165Compatible.sol\";\nimport \"./Roles.sol\";\nimport \"./Ownable.sol\";\n\n/// @dev Contract for maintaining organization registry\n/// Contract inherits from Ownable and ERC165Compatible\n/// Ownable contains ownership criteria of the organization registry\n/// ERC165Compatible contains interface compatibility checks\ncontract OrgRegistry is Ownable, ERC165Compatible, Registrar, IOrgRegistry {\n    /// @notice Leverages roles contract as imported above to assign different roles\n    using Roles for Roles.Role;\n\n    enum Role {Null, Buyer, Supplier, Carrier}\n\n    struct Org {\n        address orgAddress;\n        bytes32 name;\n        uint role;\n        bytes messagingKey;\n        bytes zkpPublicKey;\n    }\n\n    struct OrgInterfaces {\n        bytes32 groupName;\n        address tokenAddress;\n        address shieldAddress;\n        address verifierAddress;\n    }\n\n    mapping (address => Org) orgMap;\n    mapping (uint => OrgInterfaces) orgInterfaceMap;\n    uint orgInterfaceCount;\n    mapping (uint => Roles.Role) private roleMap;\n    // address[] public parties;\n    Org[] orgs;\n    mapping(address => address) managerMap;\n\n    event RegisterOrg(\n        bytes32 _name,\n        address _address,\n        uint _role,\n        bytes _messagingKey,\n        bytes _zkpPublicKey\n    );\n\n    /// @dev constructor function that takes the address of a pre-deployed ERC1820\n    /// registry. Ideally, this contract is a publicly known address:\n    /// 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24. Inherently, the constructor\n    /// sets the interfaces and registers the current contract with the global registry\n    constructor(address _erc1820) public Ownable() ERC165Compatible() Registrar(_erc1820) {\n        setInterfaces();\n        setInterfaceImplementation(\"IOrgRegistry\", address(this));\n    }\n\n    /// @notice This is an implementation of setting interfaces for the organization\n    /// registry contract\n    /// @dev the character '^' corresponds to bit wise xor of individual interface id's\n    /// which are the parsed 4 bytes of the function signature of each of the functions\n    /// in the org registry contract\n    function setInterfaces() public onlyOwner returns (bool) {\n        /// 0x54ebc817 is equivalent to the bytes4 of the function selectors in IOrgRegistry\n        supportedInterfaces[this.registerOrg.selector ^\n                            this.registerInterfaces.selector ^\n                            this.getOrgs.selector ^\n                            this.getOrgCount.selector ^\n                            this.getInterfaceAddresses.selector] = true;\n        return true;\n    }\n\n    /// @notice This function is a helper function to be able to get the\n    /// set interface id by the setInterfaces()\n    function getInterfaces() external pure returns (bytes4) {\n        return this.registerOrg.selector ^\n                this.registerInterfaces.selector ^\n                this.getOrgs.selector ^\n                this.getOrgCount.selector ^\n                this.getInterfaceAddresses.selector;\n    }\n\n    /// @dev Since this is an inherited method from ERC165 Compatible, it returns the value of the interface id\n    /// set during the deployment of this contract\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return supportedInterfaces[interfaceId];\n    }\n\n    /// @notice Indicates whether the contract implements the interface 'interfaceHash' for the address 'addr' or not.\n    /// @dev Below implementation is necessary to be able to have the ability to register with ERC1820\n    /// @param interfaceHash keccak256 hash of the name of the interface\n    /// @param addr Address for which the contract will implement the interface\n    /// @return ERC1820_ACCEPT_MAGIC only if the contract implements 'interfaceHash' for the address 'addr'.\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) external view returns(bytes32) {\n        return ERC1820_ACCEPT_MAGIC;\n    }\n\n    /// @dev Since this is an inherited method from Registrar, it allows for a new manager to be set\n    /// for this contract instance\n    function assignManager(address _oldManager, address _newManager) external {\n        assignManagement(_oldManager, _newManager);\n    }\n\n    /// @notice Function to register an organization\n    /// @param _address ethereum address of the registered organization\n    /// @param _name name of the registered organization\n    /// @param _role role of the registered organization\n    /// @param _messagingKey public key required for message communication\n    /// @param _zkpPublicKey public key required for commitments & to verify EdDSA signatures with\n    /// @dev Function to register an organization\n    /// @return `true` upon successful registration of the organization\n    function registerOrg(\n        address _address,\n        bytes32 _name,\n        uint _role,\n        bytes calldata _messagingKey,\n        bytes calldata _zkpPublicKey\n    ) external returns (bool) {\n        Org memory org = Org(_address, _name, _role, _messagingKey, _zkpPublicKey);\n        roleMap[_role].add(_address);\n        orgMap[_address] = org;\n        orgs.push(org);\n        // parties.push(_address);\n        emit RegisterOrg(\n            _name,\n            _address,\n            _role,\n            _messagingKey,\n            _zkpPublicKey\n        );\n        return true;\n    }\n\n    /// @notice Function to register the names of the interfaces associated with the OrgRegistry\n    /// @param _groupName name of the working group registered by an organization\n    /// @param _tokenAddress name of the registered token interface\n    /// @param _shieldAddress name of the registered shield registry interface\n    /// @param _verifierAddress name of the verifier registry interface\n    /// @dev Function to register an organization's interfaces for easy lookup\n    /// @return `true` upon successful registration of the organization's interfaces\n    function registerInterfaces(\n        bytes32 _groupName,\n        address _tokenAddress,\n        address _shieldAddress,\n        address _verifierAddress\n    ) external returns (bool) {\n        orgInterfaceMap[orgInterfaceCount] = OrgInterfaces(\n            _groupName,\n            _tokenAddress,\n            _shieldAddress,\n            _verifierAddress\n        );\n        orgInterfaceCount++;\n        return true;\n    }\n\n    /// @dev Function to get the count of number of organizations to help with extraction\n    /// @return length of the array containing organization addresses\n    function getOrgCount() external view returns (uint) {\n        return orgs.length;\n    }\n\n    /// @notice Function to get a single organization's details\n    function getOrg(address _address) external view returns (\n        address,\n        bytes32,\n        uint,\n        bytes memory,\n        bytes memory\n    ) {\n        return (\n            orgMap[_address].orgAddress,\n            orgMap[_address].name,\n            orgMap[_address].role,\n            orgMap[_address].messagingKey,\n            orgMap[_address].zkpPublicKey\n        );\n    }\n\n    /// @notice Function to get a single organization's interface details\n    function getInterfaceAddresses() external view returns (\n        bytes32[] memory,\n        address[] memory,\n        address[] memory,\n        address[] memory\n    ) {\n        bytes32[] memory gName = new bytes32[](orgInterfaceCount);\n        address[] memory tfAddress = new address[](orgInterfaceCount);\n        address[] memory sAddress = new address[](orgInterfaceCount);\n        address[] memory vrAddress = new address[](orgInterfaceCount);\n\n        for (uint i = 0; i < orgInterfaceCount; i++) {\n            OrgInterfaces storage orgInterfaces = orgInterfaceMap[i];\n            gName[i] = orgInterfaces.groupName;\n            tfAddress[i] = orgInterfaces.tokenAddress;\n            sAddress[i] = orgInterfaces.shieldAddress;\n            vrAddress[i] = orgInterfaces.verifierAddress;\n        }\n        return (\n            gName,\n            tfAddress,\n            sAddress,\n            vrAddress\n        );\n    }\n\n    // @notice Function to retrieve a page of registered organizations along with details\n    // @notice start and end indices here are a convenience for pagination\n    // @param start starting index of the array where organization addresses are stored\n    // @param count ending index of the array where organization addresses are stored\n    // @dev Getter to retrieve details of the organization enabled for pagination\n    // @return array form of the details of the organization as stored in the struct\n    function getOrgs() external view returns (\n        address[] memory,\n        bytes32[] memory,\n        uint[] memory,\n        bytes[] memory,\n        bytes[] memory\n    ) {\n        address[] memory addresses = new address[](orgs.length);\n        bytes32[] memory names = new bytes32[](orgs.length);\n        uint[] memory roles = new uint[](orgs.length);\n        bytes[] memory messagingKeys = new bytes[](orgs.length);\n        bytes[] memory zkpPublicKeys = new bytes[](orgs.length);\n\n        for (uint i = 0; i < orgs.length; i++) {\n            addresses[i] = orgs[i].orgAddress;\n            names[i] = orgs[i].name;\n            roles[i] = orgs[i].role;\n            messagingKeys[i] = orgs[i].messagingKey;\n            zkpPublicKeys[i] = orgs[i].zkpPublicKey;\n        }\n\n        return (\n            addresses,\n            names,\n            roles,\n            messagingKeys,\n            zkpPublicKeys\n        );\n    }\n}\n",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.17+commit.d19bba13.js"
	}
}
